# Импорт библиотеки numpy с псевдонимом np
import numpy as np

# Создание списка языка Python
numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

# Конвертация созданного списка в массив Numpy
numpy_numbers = np.array(numbers)

# Тип созданного объекта numbers
print(type(numbers))
# => <class 'list'>

# Тип созданного объекта numpy_numbers
print(type(numpy_numbers))
# => <class 'numpy.ndarray'>

# Получение элемента по индексу из списка
print(numbers[2])
# => 2

# Получение элемента по индексу из numpy.ndarray
print(numpy_numbers[2])
# => 2

# Получение элемента по отрицательному индексу из списка
print(numbers[-1])
# => 9

# Получение элемента по отрицательному индексу из numpy.ndarray
print(numpy_numbers[-1])
# => 9
################################################################################################################
################################################################################################################
# Создание списка списков
numbers_lists = [
    [0, 1, 2,],
    [3, 4, 5,],
    [6, 7, 8,],
    [9, 10, 11]
]

# Конвертация созданного списка списков в массив Numpy
numpy_numbers_lists = np.array(numbers_lists)

# Получение элемента по индексу из списка
print(numbers_lists[2][1])
# => 7

# Получение элемента по индексу из numpy.ndarray
print(numpy_numbers_lists[2][1])
# => 7

# Получение элемента по индексу из numpy.ndarray
# Более предпочтительный способ
print(numpy_numbers_lists[2,1])
# => 7
################################################################################################################
################################################################################################################
#Операции среза данных
# Создание списка списков
numbers_lists = [
    [0, 1, 2,],
    [3, 4, 5,],
    [6, 7, 8,],
    [9, 10, 11]
]

# Конвертация созданного списка списков в массив Numpy
numpy_numbers_lists = np.array(numbers_lists)

# Вырезание элементов из numpy.ndarray
print(numpy_numbers_lists[:2,:2])
# => [[0 1]
#     [3 4]]

# Попытка вырезать те же элементы из списка
print(numbers_lists[:2][:2])
# => [[0, 1, 2], [3, 4, 5]]

# Решение для вырезания элементов из списка
print([row[:2] for row in numbers_lists[:2]])
# => [[0, 1], [3, 4]]
################################################################################################################
################################################################################################################
# Создание списка списков
numbers_lists = [
    [0, 1, 2,],
    [3, 4, 5,],
    [6, 7, 8,],
    [9, 10, 11]
]

# Конвертация созданного списка списков в массив Numpy
numpy_numbers_lists = np.array(numbers_lists)

# Вырезание 0 строки из numpy.ndarray
print(numpy_numbers_lists[0,:])
# => [0 1 2]

# Вырезание 0 строки — еще один способ
print(numpy_numbers_lists[0])
# => [0 1 2]

# Вырезание 1 столбца из numpy.ndarray
print(numpy_numbers_lists[:,1])
# => [ 1  4  7 10]
################################################################################################################
################################################################################################################
#Итеративный обход
# Создание списка языка Python
numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

# Конвертация созданного списка в массив Numpy
numpy_numbers = np.array(numbers)

# Четные элементы массива
print(numpy_numbers[::2])
# => [0 2 4 6 8]

# Обратный порядок элементов массива
print(numpy_numbers[::-1])
# => [9 8 7 6 5 4 3 2 1 0]

# Создание списка списков
numbers_lists = [
    [0, 1, 2,],
    [3, 4, 5,],
    [6, 7, 8,],
    [9, 10, 11]
]

# Конвертация созданного списка списков в массив Numpy
numpy_numbers_lists = np.array(numbers_lists)

# Перестановка строк в обратном порядке
print(numpy_numbers_lists[::-1])
# => [[ 9 10 11]
#     [ 6  7  8]
#     [ 3  4  5]
#     [ 0  1  2]]

# Четные столбцы
print(numpy_numbers_lists[:,::2])
# => [[ 0  2]
#     [ 3  5]
#     [ 6  8]
#     [ 9 11]]